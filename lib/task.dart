import 'package:flutter/foundation.dart';
import 'package:hive/hive.dart';

// CRUCIAL: This line links your Task class to the file that will be
// generated by the build_runner command. The error on this line is
// expected until you run the command.
part 'task.g.dart';

@HiveType(typeId: 0)
class Task extends HiveObject {
  @HiveField(0)
  final String id;

  @HiveField(1)
  final String title;

  @HiveField(2)
  final double progress;

  @HiveField(3)
  final bool isCompleted;

  @HiveField(4)
  final double target;

  @HiveField(5)
  final double current;

  Task({
    required this.id,
    required this.title,
    this.progress = 0.0,
    this.isCompleted = false,
    this.target = 1.0,
    this.current = 0.0,
  }) : assert(progress >= 0.0 && progress <= 1.0, 'Progress must be between 0.0 and 1.0');

  double get progressPercent => (progress * 100).clamp(0.0, 100.0);

  factory Task.fromJson(Map<String, dynamic> json) {
    double parseDouble(dynamic value, {double defaultValue = 0.0}) {
      if (value is num) {
        return value.toDouble();
      } else if (value is String) {
        return double.tryParse(value) ?? defaultValue;
      }
      return defaultValue;
    }

    double parsedProgress = parseDouble(json['progress'], defaultValue: 0.0);
    parsedProgress = parsedProgress.clamp(0.0, 1.0);

    double parsedTarget = parseDouble(json['target'], defaultValue: 1.0);
    double parsedCurrent = parseDouble(json['current'], defaultValue: 0.0);

    bool parseBool(dynamic value, {bool defaultValue = false}) {
      if (value is bool) return value;
      if (value is String) return value.toLowerCase() == 'true';
      if (value is int) return value == 1;
      return defaultValue;
    }
    bool parsedIsCompleted = parseBool(json['isCompleted'], defaultValue: false);

    return Task(
      id: json['id']?.toString() ?? json['netsuiteId']?.toString() ?? DateTime.now().millisecondsSinceEpoch.toString(),
      title: json['title']?.toString() ?? 'Untitled Task',
      progress: parsedProgress,
      isCompleted: parsedIsCompleted,
      target: parsedTarget,
      current: parsedCurrent,
    );
  }

  Task copyWith({
    String? id,
    String? title,
    double? progress,
    bool? isCompleted,
    double? target,
    double? current,
  }) {
    final clampedProgress = (progress ?? this.progress).clamp(0.0, 1.0);
    final newTarget = target ?? this.target;
    final newCurrent = current ?? (clampedProgress * newTarget);

    return Task(
      id: id ?? this.id,
      title: title ?? this.title,
      progress: clampedProgress,
      isCompleted: isCompleted ?? (clampedProgress >= 1.0 ? true : this.isCompleted),
      target: newTarget,
      current: newCurrent,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'progress': progress.clamp(0.0, 1.0),
      'isCompleted': isCompleted,
      'target': target,
      'current': current,
    };
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
          other is Task &&
              runtimeType == other.runtimeType &&
              id == other.id &&
              title == other.title &&
              progress == other.progress &&
              isCompleted == other.isCompleted &&
              target == other.target &&
              current == other.current;

  @override
  int get hashCode =>
      id.hashCode ^
      title.hashCode ^
      progress.hashCode ^
      isCompleted.hashCode ^
      target.hashCode ^
      current.hashCode;

  @override
  String toString() {
    return 'Task(id: $id, title: "$title", progress: $progress, completed: $isCompleted, target: $target, current: $current)';
  }
}
